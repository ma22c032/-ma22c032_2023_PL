# -*- coding: utf-8 -*-
"""Ehrenfest thought experiment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M8j8kfMpS7sIjMCWKXY-KfSy_tq4LwO_
"""

#Task 1: Model the process as a Markov chain and create the transition matrix for k = 2.

import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

def create_transition_matrix(k):
    n_states = k + 1
    transition_matrix = np.zeros((n_states, n_states))

    for i in range(n_states):
        if i > 0:
            transition_matrix[i][i - 1] = i / (2 * k)
        if i < k:
            transition_matrix[i][i + 1] = (k - i) / (2 * k)

    return transition_matrix

k = 2
transition_matrix = create_transition_matrix(k)
print("Transition matrix for k = 2:")
print(transition_matrix)

#Task 2: Check if the transition matrix P is irreducible.

#The transition matrix P is irreducible if, for any two states i and j, there is a positive integer n such that P^n[i][j] > 0. In this case, for k > 1, the matrix is irreducible because you can eventually reach any state from any other state.

#Task 3: Check if P^n converges as n → ∞.

#For this Markov chain, P^n will converge as n → ∞ to a stationary distribution, assuming k > 1. The stationary distribution can be found by finding the eigenvector associated with the eigenvalue 1.

#Task 4: Plot the stationary distribution for k = 100.
k = 100
transition_matrix = create_transition_matrix(k)
eigenvalues, eigenvectors = np.linalg.eig(transition_matrix.T)
stationary_distribution = eigenvectors[:, 0] / eigenvectors[:, 0].sum()

# Plot the stationary distribution
plt.plot(range(k+1), stationary_distribution, marker='o')
plt.title("Stationary Distribution for k = 100")
plt.xlabel("Number of Balls in the First Urn")
plt.ylabel("Probability")
plt.show()