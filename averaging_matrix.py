# -*- coding: utf-8 -*-
"""averaging matrix

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z_Xhnk5G2vcjGRaEI-ZpGwsU3TrOHpAx
"""

import numpy as np

def create_averaging_matrix(n, k):
    # Create a matrix with ones on diagonals, superdiagonals, and subdiagonals
    A = np.eye(n)  # Diagonal
    for i in range(1, k + 1):
        A += np.eye(n, k=i) + np.eye(n, k=-i)

    # Normalize rows to make row sums equal one
    A /= np.sum(A, axis=1)[:, np.newaxis]

    return A

# Apply A to a vector x with entries xj = (-1)^j
n_x = 20
k_x = 2
x = np.array([(-1) ** j for j in range(n_x)])
result_vector_x = np.dot(create_averaging_matrix(n_x, k_x), x)

# Apply A to a vector f(x) = x^2 + 2 * sin(10x)
n_fx = 1000
k_fx = 100
x_values = np.linspace(0, 10, n_fx)
f_x = x_values**2 + 2 * np.sin(10 * x_values)
result_vector_fx = np.dot(create_averaging_matrix(n_fx, k_fx), f_x)

# You can analyze the resulting vectors as needed