# -*- coding: utf-8 -*-
"""Argument passing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XRhA7ULp11QgUeFFDyCnNVRTnzNujqyQ
"""

# Import the necessary libraries
import numpy as np

# Define the function 'twice' which multiplies a given input 'w' by 2
def twice(w):
    """Replace w by 2*w"""
    w *= 2

# Case 1: v is a numpy array
# Explanation:
# Numpy arrays are mutable objects in Python. When you pass a numpy array 'v' to the 'twice' function,
# it modifies the original array 'v' in-place, and no deep copy is made. This is because numpy arrays
# have a view-based approach and often behave like pointers, allowing efficient operations on large data.
v_numpy = np.array([2, 5, 1])
twice(v_numpy)
print("After calling twice(v_numpy):", v_numpy)  # 'v_numpy' has been modified in-place

# Case 2: v is a string
# Explanation:
# Strings in Python are immutable objects. When you pass a string 'v' to the 'twice' function,
# it creates a new string object with the result of the operation and assigns it to 'w'.
# The original string 'v' remains unchanged. Therefore, a deep copy is implicitly made.
v_string = "Hello"
twice(v_string)
print("After calling twice(v_string):", v_string)  # 'v_string' remains unchanged

# Summary:
# - For numpy arrays or mutable objects, modifications made within the function affect the original object.
# - For immutable objects like strings, a new object is created within the function, and the original object remains unchanged.