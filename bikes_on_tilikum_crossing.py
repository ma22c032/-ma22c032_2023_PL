# -*- coding: utf-8 -*-
"""Bikes on Tilikum Crossing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rtuXAdUedKrSu9S-FpHfCfRq2Iv8oMpG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn; seaborn.set()

# metadata file (small file)
tm = pd.read_csv('/content/metadata_large_bikedata (1).csv')
# data file (large file)
td = pd.read_csv('/content/large_bikedata (1).csv')
td.head()

td.tail() # It displays the last few rows of the td

dif = pd.to_datetime(td['end_time']) - pd.to_datetime(td['start_time'])
(dif == dif[0]).all()

# renames the 'start_time' column to 'time' and drops the 'end_time', 'measure_period', and 'id' columns
# from the td DataFrame

td = td.rename(columns={'start_time':'time'}).drop(columns=['end_time','measure_period', 'id'])

# Access specific metadata from the metadata file
desired_columns = ['flow_detector_id']
metadata_subset = tm[tm['Column Name'].isin(desired_columns)]
print(metadata_subset)

#counts how many times the value 1904 appears in the 'flow_detector_id' column of the td DataFrame.
(td.flow_detector_id==1904).sum()

#extract data from the td DataFrame for the flow detector with 'flow_detector_id' 1903.

tE = td.loc[td['flow_detector_id'] == 1903, ['time', 'volume']]
tE['time'] = pd.to_datetime(tE['time']).dt.tz_localize('UTC').dt.tz_convert('US/Pacific')
tE = tE.set_index('time').rename(columns={'volume': 'Eastbound'})

print(tE)

# same as tE
tW = td.loc[td['flow_detector_id'] == 1905, ['time', 'volume']]
tW['time'] = pd.to_datetime(tW['time']).dt.tz_localize('UTC').dt.tz_convert('US/Pacific')
tW = tW.set_index('time').rename(columns={'volume': 'Westbound'})

tE.plot();

tE['2018-11-25':'2019-06-01'].plot();

tE['2018-11-25':'2019-06-01'] = np.nan

#filter and modify data in the 'tE' DataFrame for a specific date range and set values to NaN (missing data) under certain conditions
#Similar operations may also be performed on the 'tW' DataFrame.
tE[tE > 1000] = np.nan
tW[tW > 1000] = np.nan

