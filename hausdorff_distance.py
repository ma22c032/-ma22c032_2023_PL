# -*- coding: utf-8 -*-
"""hausdorff distance

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xqh1qv0VYfNQZ2dxloe3tn0cYVIAFNdF
"""

!pip install gitpython

import numpy as np

# Function to calculate the Euclidean distance between two points
def euclidean_distance(p1, p2):
    return np.linalg.norm(p1 - p2)

# Function to calculate h(P, Q)
def hausdorff_distance(p, q):
    min_distances = []
    for p_point in p:
        min_distance = min(euclidean_distance(p_point, q_point) for q_point in q)
        min_distances.append(min_distance)
    return max(min_distances)

# Function to calculate the Hausdorff distance H(P, Q)
def hausdorff_distance_between_sets(P, Q):
    h_pq = hausdorff_distance(P, Q)
    h_qp = hausdorff_distance(Q, P)
    return max(h_pq, h_qp)

# Example usage:
# Define collections P and Q as numpy arrays of points
P = np.array([[1, 2], [3, 4], [5, 6]])
Q = np.array([[2, 3], [4, 5], [6, 7]])

# Calculate the Hausdorff distance between P and Q
hausdorff_dist = hausdorff_distance_between_sets(P, Q)

# Print the result
print("Hausdorff Distance between P and Q:", hausdorff_dist)