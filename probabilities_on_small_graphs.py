# -*- coding: utf-8 -*-
"""Probabilities on small graphs

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iZWryQQoiG4HjQsuK5gY0F7QOaMjfrv0
"""

import numpy as np

# Task 1: Probability of hitting one state from another state
# Define the transition matrix based on the graph
# Rows represent the starting states, columns represent the target states
transition_matrix = np.array([
    [0, 0.5, 0.5, 0, 0, 0, 0],
    [0.5, 0, 0.5, 0, 0, 0, 0],
    [0.5, 0.5, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0.5, 0.5],
    [0, 0, 0, 0, 0.5, 0, 0.5],
    [0, 0, 0, 0, 0.5, 0.5, 0]
])

# Use eigenvector method to calculate hitting probabilities
eigenvalues, eigenvectors = np.linalg.eig(transition_matrix.T)
stationary_distribution = eigenvectors[:, 0] / eigenvectors[:, 0].sum()
print("Task 1: Hitting probabilities using eigenvector method")
print(stationary_distribution)

# Task 2: Hitting probabilities starting from B to A
# Define the starting and target sets
B_states = [0, 1, 2]
A_states = [3]

# Calculate the hitting probabilities from B to A
def hitting_probabilities_B_to_A(transition_matrix, B_states, A_states):
    P_B_to_A = transition_matrix[B_states][:, A_states]
    hitting_probability = np.linalg.inv(np.eye(len(B_states)) - P_B_to_A).sum()
    return hitting_probability

print("\nTask 2: Hitting probability from B to A")
for state in B_states:
    probability = hitting_probabilities_B_to_A(transition_matrix, [state], A_states)
    print(f"Starting from {state} to {A_states}: {probability}")

# Task 3: Hitting probabilities for remaining states
remaining_states = [4, 5, 6]

def hitting_probabilities(transition_matrix, source_states, target_states):
    P_source_to_target = transition_matrix[source_states][:, target_states]
    hitting_probabilities = np.linalg.inv(np.eye(len(source_states)) - P_source_to_target)
    return hitting_probabilities

print("\nTask 3: Hitting probabilities for A from remaining states")
for state in remaining_states:
    probabilities = hitting_probabilities(transition_matrix, [state], A_states)
    print(f"Starting from {state} to {A_states}: {probabilities}")

# Task 4: Hitting probabilities starting from 1 to 0 and 3 to 6
print("\nTask 4: Hitting probabilities")
probability_1_to_0 = hitting_probabilities_B_to_A(transition_matrix, [1], [0])
probability_3_to_6 = hitting_probabilities_B_to_A(transition_matrix, [3], [6])
print(f"Starting from 1 to 0: {probability_1_to_0}")
print(f"Starting from 3 to 6: {probability_3_to_6}")