# -*- coding: utf-8 -*-
"""differentiation matrix

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1luPo8-iv97t7XOP4gIPRhHmfEu5_m3uW
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.sparse import diags

def create_differentiation_matrix(n, h):
    # Create a differentiation matrix D with (n-1) rows and n columns
    diagonals = [1, -1]
    offsets = [0, 1]
    D = diags(diagonals, offsets, shape=(n-1, n), format="csr")
    return (1 / h) * D  # Scale by h^-1

# Define the grid parameters
n = 1000  # Number of equally spaced values of x
h = 10 / (n - 1)  # Grid spacing
x_values = np.linspace(0, 10, n)

# Define functions to differentiate
def f1(x):
    return np.sin(x)

def f2(x):
    return x**2 + 2 * np.sin(10 * x)

# Create the differentiation matrix
D = create_differentiation_matrix(n, h)

# Apply D to functions to approximate derivatives
df1 = D.dot(f1(x_values))
df2 = D.dot(f2(x_values))

# Plot the results
plt.figure(figsize=(12, 6))

plt.subplot(2, 1, 1)
plt.plot(x_values[:-1], df1, label="Approximation of sin(x)'")
plt.title("Approximation of sin(x)'")
plt.grid(True)

plt.subplot(2, 1, 2)
plt.plot(x_values[:-1], df2, label="Approximation of x^2 + 2 * sin(10x)'")
plt.title("Approximation of x^2 + 2 * sin(10x)'")
plt.grid(True)

plt.tight_layout()
plt.show()