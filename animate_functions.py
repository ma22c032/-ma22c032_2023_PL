# -*- coding: utf-8 -*-
"""Animate_functions

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tFUilg8QzF75fHTie30EZ8SxVWzgfUBE
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation, rc
from IPython.display import HTML

# Define the function f(x, t)
def f(x, t):
    return 1 / ((x + t) ** 2) + 2 * np.sin(10 * (x - t))

# Define the spatial and time intervals
x_values = np.linspace(0, 10, 100)  # Spatial interval [0, 10]
t_values = np.linspace(0, 5, 100)   # Time interval [0, 5]

# Create a meshgrid of x and t values
x, t = np.meshgrid(x_values, t_values)

# Calculate f for all (x, t) pairs
z = f(x, t)

# Create a figure and set up the plot
fig, ax = plt.subplots()
ax.set_xlim(0, 10)
ax.set_ylim(-5, 5)

# Initialize the plot
line = ax.plot([], [], lw=2)[0]

def init():
    line.set_data([], [])
    return line,

# Define the animation function
def animate(i):
    line.set_data(x_values, z[i, :])
    return line,

# Create the animation
anim = animation.FuncAnimation(fig, animate, init_func=init, frames=len(t_values), interval=100, blit=True)

# Display the animation using the 'jshtml' backend
rc('animation', html='jshtml')
anim

!pip install celluloid

import numpy as np
import matplotlib.pyplot as plt
from celluloid import Camera

# Define the function f(x, t)
def f(x, t):
    return 1 / ((x + t) ** 2) + 2 * np.sin(10 * (x - t))

# Define the spatial and time intervals
x_values = np.linspace(0, 10, 100)  # Spatial interval [0, 10]
t_values = np.linspace(0, 5, 100)   # Time interval [0, 5]

# Create a figure and set up the plot
fig, ax = plt.subplots()
ax.set_xlim(0, 10)
ax.set_ylim(-5, 5)

# Create a Camera object
camera = Camera(fig)

# Loop through time values and update the plot
for t in t_values:
    y = f(x_values, t)
    ax.plot(x_values, y)
    camera.snap()

# Animate the plot
animation = camera.animate(blit=False)

# Display the animation
from IPython.display import HTML
HTML(animation.to_jshtml())

import numpy as np
import matplotlib.pyplot as plt
from celluloid import Camera

# Define the function f(x, t)
def f(x, t):
    return 1 / ((x + t) ** 2) + 2 * np.sin(10 * (x - t))

# Define the spatial and time intervals
x_values = np.linspace(0, 10, 100)  # Spatial interval [0, 10]
t_values = np.linspace(0, 5, 100)   # Time interval [0, 5]

# Create a figure and set up the plot
fig, ax = plt.subplots()
ax.set_xlim(0, 10)
ax.set_ylim(-5, 10)

# Create a Camera object
camera = Camera(fig)

# Loop through time values and update the plot
for t in t_values:
    y = f(x_values, t)
    ax.plot(x_values, y)
    ax.set_title(f"Time t = {t:.2f}")

    # Add a text label for the current time
    ax.text(7, 8, f"Time: {t:.2f}", fontsize=12, color='red')

    camera.snap()

# Animate the plot
animation = camera.animate(blit=False)

# Display the animation
from IPython.display import HTML
HTML(animation.to_jshtml())

