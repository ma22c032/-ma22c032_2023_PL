# -*- coding: utf-8 -*-
"""Passengers_on_the_Titanic

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IsjEzt9UgVYpk_GeoQ-Dg8I-_Akbxuep
"""

import numpy as np #  library for numerical operations
import pandas as pd # library for data manipulation and analysis
import seaborn #data visualization library

t = seaborn.load_dataset('titanic') # load the Titanic dataset using Seaborn and store it in the variable t
t.head() # displays the first few rows of the dataset

passenger_count = t.shape[0] # calculates the number of rows in the dataset (number of passengers)
print("The number of passengers described in the dataset is:", passenger_count)

distinct_values_count = t['who'].nunique() # it calculates the number of distinct values in the 'who' column(man, woman, child) of the dataset using nunique()
distinct_values = t['who'].unique() # and stores it in distinct_values_count

print("Number of distinct values in the 'who' column:", distinct_values_count)
print("Distinct values in the 'who' column:", distinct_values)

missing_values = t.isna().sum() # number of missing values (NaN) in each column of the dataset
print("Number of missing values in each data column:")
print(missing_values)

passengers_over_60 = t[t['age'] > 60] # elect passengers with ages over 60 and stores them in passengers_over_60
number_of_passengers_over_60 = len(passengers_over_60)
print("Number of passengers over 60 years old:", number_of_passengers_over_60)

import matplotlib.pyplot as plt

# Set the style of the plot
seaborn.set(style="whitegrid") #  style for Seaborn plots to "whitegrid."

# create a histogram of passenger ages using Seaborn and Matplotlib
plt.figure(figsize=(10, 6))
seaborn.histplot(data=t, x='age', kde=True, bins=20, color='skyblue')
plt.title('Passenger Age Distribution')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()

# calculates the 25th, 50th (median), and 75th percentiles of passenger ages
quantiles = t['age'].quantile([0.25, 0.5, 0.75])
print("25th percentile:", quantiles[0.25])
print("50th percentile, median:", quantiles[0.5])
print("75th percentile:", quantiles[0.75])

t.dropna(subset=['embarked'], inplace=True) # emoves rows with missing values in the 'embarked' column and updates the dataset

# calculates and prints the average, minimum, and maximum fares in the dataset
average_fare = t['fare'].mean()
minimum_fare = t['fare'].min()
maximum_fare = t['fare'].max()

print("Average Fare:", average_fare)
print("Minimum Fare:", minimum_fare)
print("Maximum Fare:", maximum_fare)

# Calculate the proportions of passengers in different classes
class_proportions = t['class'].value_counts(normalize=True)
print("\nProportions of Passengers in Different Classes:")
print(class_proportions)

#groups the data by both 'class' and 'sex' and calculates the count of passengers for each combination.
gender_class_ratio = t.groupby(['class', 'sex']).size().unstack()
# calculates the female-to-male ratio for each travel class and adds it to the table
gender_class_ratio['Female-to-Male Ratio'] = gender_class_ratio['female'] / gender_class_ratio['male']
print("Female-to-Male Ratio in Each Travel Class:")
print(gender_class_ratio[['Female-to-Male Ratio']])

#calculates the fraction of passengers who survived by taking the mean of the 'survived' column, which contains binary values
survival_fraction = t['survived'].mean()
print("Fraction of passengers who survived:", survival_fraction)

#calculates the fraction of passengers who survived by taking the mean of the 'survived' column, which contains binary values
survival_rates_by_gender = t.groupby('sex')['survived'].mean()
print("Survival rates by gender:")
print(survival_rates_by_gender)

#groups the data by 'class' and calculates the mean of the 'survived' column for each passenger class.
survival_rates_by_class = t.groupby('class')['survived'].mean()
print("Survival rates by passenger class:")
print(survival_rates_by_class)

#Creates a pivot table that displays survival rates by passenger class and gender
# uses the 'pivot_table' function, specifying the row index ('class'), column index ('sex'), and values ('survived'), and aggregates the values using the mean
survival_table = t.pivot_table(index='class', columns='sex', values='survived', aggfunc='mean')
print("Table of Survival Rates by Class and Gender:")
print(survival_table)

# creates another pivot table, but this time it combines information about
# the number of survivors ('survived') and the average fare ('fare') by gender and cabin class

table = t.pivot_table(index='sex', columns='class', values=['survived', 'fare'], aggfunc={'survived': 'sum', 'fare': 'mean'})
print("Table with Number of Survivors and Average Fare by Gender and Cabin:")
print(table)

