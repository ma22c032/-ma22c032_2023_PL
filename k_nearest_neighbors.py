# -*- coding: utf-8 -*-
"""k Nearest Neighbors

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1chyl4HtyFCZSUbeYoI8msY-fjX5h13Zr
"""

!pip install gitpython

import numpy as np
import matplotlib.pyplot as plt

# Function to calculate the Euclidean distance between two points
def euclidean_distance(p1, p2):
    return np.linalg.norm(p1 - p2)

# Function to find the k nearest neighbors for each point
def find_k_nearest_neighbors(points, k):
    num_points = len(points)
    k_nearest = []

    for i in range(num_points):
        distances = [euclidean_distance(points[i], points[j]) for j in range(num_points) if i != j]
        k_nearest_indices = np.argsort(distances)[:k]
        k_nearest.append(k_nearest_indices)

    return k_nearest

# Set of points
P = np.array([[0, 0], [0.2, 0.22], [0.1, -0.1], [1, 1], [1.1, 0.9], [0.8, 0.9], [1.1, 0.63],
              [0.58, -0.1], [0.63, 0.1], [0.67, -0.3], [0.8, -0.23], [0.8, 0.6]])

k = 3

# Find k nearest neighbors for each point
k_nearest_neighbors = find_k_nearest_neighbors(P, k)

# Plot the points
plt.scatter(P[:, 0], P[:, 1], color='blue', label='Points')

# Plot arrows from each point to its k-nearest neighbors
for i, neighbors in enumerate(k_nearest_neighbors):
    for neighbor_index in neighbors:
        plt.arrow(P[i, 0], P[i, 1], P[neighbor_index, 0] - P[i, 0], P[neighbor_index, 1] - P[i, 1],
                  head_width=0.05, head_length=0.05, fc='red', ec='red')

plt.xlim(-0.1, 1.2)
plt.ylim(-0.4, 1.2)
plt.xlabel('X')
plt.ylabel('Y')
plt.title(f'k-Nearest Neighbors (k={k})')
plt.legend()
plt.grid(True)
plt.show()