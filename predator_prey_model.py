# -*- coding: utf-8 -*-
"""Predator-prey model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I9LHztGY-gZmgj8gkAgwBwpyuRJJqM1j
"""

!pip install gitpython

import numpy as np
import matplotlib.pyplot as plt

# Constants
alpha = 1.1
beta = 0.4
delta = 0.1
gamma = 0.1

# Task 1: Solve for r(t) and x(t) with initial conditions r(0) = 5 and x(0) = 2
def predator_prey_model(t, y):
    r, x = y
    drdt = alpha * r - beta * r * x
    dxdt = delta * r * x - gamma * x
    return [drdt, dxdt]

# Time span and initial conditions
t_span = np.linspace(0, 70, 1000)
initial_conditions = [5, 2]

# Numerical integration using scipy's solve_ivp
from scipy.integrate import solve_ivp

sol = solve_ivp(predator_prey_model, [0, 70], initial_conditions, t_eval=t_span)

# Task 2: Phase plot with 10 random initial conditions
plt.figure(figsize=(8, 6))
for _ in range(10):
    random_initial_conditions = np.random.uniform(1, 9, size=2)
    sol = solve_ivp(predator_prey_model, [0, 70], random_initial_conditions, t_eval=t_span)
    plt.plot(sol.y[1], sol.y[0], label=f'r(0)={random_initial_conditions[0]}, x(0)={random_initial_conditions[1]}')

# Task 3: Equilibrium points
equilibrium_points = [(alpha / beta, delta / gamma), (0, 0)]

# Plot equilibrium points
equilibrium_points = np.array(equilibrium_points)
plt.scatter(equilibrium_points[:, 1], equilibrium_points[:, 0], color='red', marker='o', label='Equilibrium Points')

# Set labels and legend
plt.xlabel('x(t) (Foxes)')
plt.ylabel('r(t) (Rabbits)')
plt.title('Predator-Prey Model Phase Portrait')
plt.legend()
plt.grid()
plt.show()